#!/usr/bin/env bash

# a script to create a the desired directory structure and filenames for DPX packages received from VFS

# load nmaahcmmfunctions into this script
script_path=${0%/*}
. "${script_path}/nmaahcmmfunctions"
[[ -f "${script_path}/nmaahcmmfunctions" ]] || { echo "Missing '${script_path}/nmaahcmmfunctions'. Exiting." ; exit 1 ;};
_setcolors # assigns colors using a function defined in nmaahcmmfunctions
_initialize_make # safe script termination process defined in nmaahcmmfunctions

### USAGE
usage(){
    echo
    echo "$(basename "${0}")"
    echo "This application will create a the desired directory structure and filenames for DPX packages received from VFS."
    echo "The options below are optional; simply run '$(basename ${0})' if you would prefer to be prompted for each input."
    echo "Do not append a trailing slash to your directories."
    echo "Usage: $(basename ${0}) [ -d /path/to/deliver/to/ ] [ -i DPX_Object_ID ] [ -t DPX_Object_Title ] [ -r (number of reels) ] [ -c ] dpxpackage"
    echo "  -d directory (directory to deliver the resulting package to)"
    echo "  -i DPX_Object_ID (ex. 2012_79_1_54)"
    echo "  -t DPX_Object_Title (ex. Something_to_Build_On)"
    echo "  -r number (number of reels in the package, up to 3)"
    echo "  -c cleanup source files (remove all source files after script runs)"
    echo "  -h (display this help)"
    echo
    exit
}
# getopts loop
OPTIND=1
while getopts ":d:i:t:r:ch" OPT; do
    case "${OPT}" in
        d) deliverdir="${OPTARG}" && _check_deliverdir ;; # _check_deliverdir defined in nmaahcmmfunctions
        i) dpxid="${OPTARG}" ;;
        t) title="${OPTARG}" ;;
        r) reelnumber="${OPTARG}" ;;
        c) cleanupdecision="Y" ;;
        h) usage ;; # if the operator runs "[scriptname] -h" then the usage text above will display in the terminal
        *) echo "Invalid option -${OPTARG}" ; usage ;; # if the operator tries to use an option other than the ones listed above, the usage text will display in the terminal
    esac
done
shift $(( ${OPTIND} - 1 ))

### FUNCTIONS
restructureDPX(){
    input="${1}"
    
    if [[ -z "${reelnumber}" ]] ; then
        printf "%sPlease enter the number of reels your DPX package has: %s" "${biwhite}" "${color_off}"
        read -r reelnumber
        echo
    fi
    if [[ -z "${dpxid}" ]] ; then
        printf "%sPlease enter DPX_Object_ID_Number with underscores:\n" "${biwhite}"
        printf "ex. 2015_167_10_1\n%s" "${color_off}"
        read -r dpxid
        echo
    fi
    if [[ -z "${title}" ]] ; then
        printf "%sPlease enter DPX_Object_Title with underscores:\n" "${biwhite}"
        printf "ex. Juke_Joint\n%s" "${color_off}"
        read -r title
        echo
    fi
    if [[ -z "${deliverdir}" ]] ; then
        printf "%sPlease drag in the full path to the destination (where the new directory should be created) (no trailing slash):\n%s" "${biwhite}" "${color_off}"
        read -r deliverdir
        echo
    fi
    if [[ -z "${input}" ]] ; then
        printf "%sPlease drag in the full path to the input directory (no trailing slash):\n%s" "${biwhite}" "${color_off}"
        read -r input
        echo
    fi
    packagename="${dpxid}__${title}"
    outputdir="${deliverdir}/${packagename}"
    mkdir "${outputdir}"

    case "${reelnumber}" in
        1 )
            printf "%sMoving files from %s ${input}\n${biwhite}${color_off}"
            if [[ -d "${outputdir}" ]] ; then
                rsync -av "${input}/" "${outputdir}"
                RSYNC_ERR="${?}"
                if [[ -n "${RSYNC_ERR}" ]] && [[ "${RSYNC_ERR}" -gt "0" ]] ; then
                    echo "${RSYNC_ERR}"
                    printf "${bired}Initial rsync process failed. Exiting script...${color_off}\n"
                    exit 1
                fi
                # find and rename .wav directories
                for wavpath in "${outputdir}"/*WAV ; do
                    if [[ ! -d "${wavpath}" ]]; then
                        printf "\n\t%sNo .wav directory found.%s\n" "${biwhite}" "${color_off}"
                        echo
                    else
                        while [[ -d "${wavpath}" ]] ; do
                            aud=("${outputdir}/${dpxid}__${title}__Audio") &&
                            printf "\n\t%sFound .wav directory ${wavpath}.\n\tRenaming to:\n\t%s%s\n" "${biwhite}" "${aud}" "${color_off}" &&
                            mv -i "${wavpath}" "${aud}"
                        done
                    fi
                done
                # find and rename .mov directories
                for movpath in "${outputdir}"/*MOV ; do
                    if [[ ! -d "${movpath}" ]] ; then
                        printf "\n\t%sNo .mov directory found.%s\n" "${biwhite}" "${color_off}"
                        echo
                    else
                        while [[ -d "${movpath}" ]] ; do
                            der=("${outputdir}/${dpxid}__${title}__Derivatives") &&
                            printf "\n\t%sFound .mov directory ${movpath}.\n\tRenaming to:\n\t%s%s\n" "${biwhite}" "${der}" "${color_off}" &&
                            mv -i "${movpath}" "${der}"
                        done
                    fi
                done
                # find and rename DPX directories
                for dpxpath in "${outputdir}"/*DPX ; do
                    if [[ ! -d "${dpxpath}" ]] ; then
                        printf "\n\t%sNo DPX directory found.%s\n" "${biwhite}" "${color_off}"
                        echo
                    else
                        while [[ -d "${dpxpath}" ]] ; do
                            dpx=("${outputdir}/${dpxid}__${title}__DPX") &&
                            printf "\n\t%sFound DPX directory ${dpxpath}.\n\tRenaming to:\n\t%s%s\n" "${biwhite}" "${dpx}" "${color_off}" &&
                            mv -i "${dpxpath}" "${dpx}"
                            echo
                        done
                    fi
                done
            else
                printf "%sMissing%s %s" "${bired}" "${color_off}" "${outputdir}"
                echo
                exit 1
            fi
            # find the .wav and .mov files and rename them according to NMAAHC naming structures. Finds files based on filenaming + extension; assumes each file will have descriptive filename + lowercase extension.
            printf "\n%sRenaming files in %s%s\n" "${biwhite}" "${color_off}" "${outputdir}"
            echo
            if [[ -d "${aud}" ]] ; then
                find "${aud}" -name "*.wav" -exec mv -i "{}" "${aud}/${dpxid}_AUD.wav" \;
                wav="${aud}/${dpxid}_AUD.wav"
                printf "\n\t%sRenamed audio file to %s%s\n" "${biwhite}" "${wav}" "${color_off}"
            fi
            if [[ -d "${der}" ]] ; then
                find "${der}" -name "*ProRes*.mov" -exec mv -i "{}" "${der}/${dpxid}_DER_01.mov" \;
                der1="${der}/${dpxid}_DER_01.mov"
                printf "\n\t%sRenamed ProRes file to %s%s\n" "${biwhite}" "${der1}" "${color_off}"
                fi
            if [[ -d "${der}" ]] ; then
                find "${der}" -name "*Uncompressed.mov" -exec mv -i "{}" "${der}/${dpxid}_DER_02.mov" \;
                der2="${der}/${dpxid}_DER_02.mov"
                printf "\n\t%sRenamed uncompressed file to %s%s\n" "${biwhite}" "${der2}" "${color_off}"
                echo
            fi
            ;;

        2 )
            printf "%sMoving files from%s %s" "${biwhite}" "${color_off}" "${input}"
            rsync -av "${input}/" "${outputdir}"
            RSYNC_ERR="${?}"
            if [[ -n "${RSYNC_ERR}" ]] && [[ "${RSYNC_ERR}" -gt "0" ]] ; then
                echo "${RSYNC_ERR}"
                printf "${bired}Initial rsync process failed. Exiting script...${color_off}\n"
                exit 1
            fi
            # make separate subdirectories for R1 and R2, with further subdirectories for the different components
            R1=("${outputdir}/${packagename}_R1")
            audR1="${R1}/${packagename}_R1__Audio"
            derR1="${R1}/${packagename}_R1__Derivatives"
            dpxR1="${R1}/${packagename}_R1__DPX"
            R2=("${outputdir}/${packagename}_R2")
            audR2="${R2}/${packagename}_R2__Audio"
            derR2="${R2}/${packagename}_R2__Derivatives"
            dpxR2="${R2}/${packagename}_R2__DPX"
            mkdir -p "${R1}" "${audR1}" "${derR1}" "${dpxR1}" "${R2}" "${audR2}" "${derR2}" "${dpxR2}"
            # find and move audio, derivatives, and DPX files for each reel in turn. Finds files based on filenaming + extension; assumes each file will have reel # in filename + lowercase extension.
            if [[ -d "${audR1}" ]] ; then
                find "${outputdir}" -name "*R1*.wav" -exec mv -vi {} "${audR1}" \;
            else
                printf "%sMissing ${audR1}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${derR1}" ]] ; then
                find "${outputdir}" -name "*R1*.mov" -exec mv -vi {} "${derR1}" \;
            else
                printf "%sMissing ${derR1}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${dpxR1}" ]] ; then
                find "${outputdir}" -name "*R1*.dpx" -exec mv -vi {} "${dpxR1}" \;
            else
                printf "%sMissing ${dpxR1}%s" "${bired}" "${color_off}"
                exit 1
            fi

            if [[ -d "${audR2}" ]] ; then
                find "${outputdir}" -name "*R2*.wav" -exec mv -vi {} "${audR2}" \;
            else
                printf "%sMissing ${audR2}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${derR2}" ]] ; then
                find "${outputdir}" -name "*R2*.mov" -exec mv -vi {} "${derR2}" \;
            else
                printf "%sMissing ${derR2}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${dpxR2}" ]] ; then
                find "${outputdir}" -name "*R2*.dpx" -exec mv -vi {} "${dpxR2}" \;
            else
                printf "%sMissing ${dpxR2}%s" "${bired}" "${color_off}"
                exit 1
            fi
            # rename files according to NMAAHC filenaming guidelines
            printf "%sRenaming files in %s%s\n" "${biwhite}" "${color_off}" "${outputdir}"
            find "${audR1}" -name "*R1*.wav" -exec mv -vi {} "${audR1}/${dpxid}_R1_AUD.wav" \;
            find "${derR1}" -name "*R1*ProRes*.mov" -exec mv -vi {} "${derR1}/${dpxid}_R1_DER_01.mov" \;
            find "${derR1}" -name "*R1*Uncompressed*.mov" -exec mv -vi {} "${derR1}/${dpxid}_R1_DER_02.mov" \;
            find "${audR2}" -name "*R2*.wav" -exec mv -vi {} "${audR2}/${dpxid}_R2_AUD.wav" \;
            find "${derR2}" -name "*R2*ProRes*.mov" -exec mv -vi {} "${derR2}/${dpxid}_R2_DER_01.mov" \;
            find "${derR2}" -name "*R2*Uncompressed*.mov" -exec mv -vi {} "${derR2}/${dpxid}_R2_DER_02.mov" \;
            ;;

        3 )
            printf "%sMoving files from%s %s\n" "${biwhite}" "${color_off}" "${input}"
            rsync -av "${input}/" "${outputdir}"
            RSYNC_ERR="${?}"
            # exit script if rsync did not complete successfully
            if [[ -n "${RSYNC_ERR}" ]] && [[ "${RSYNC_ERR}" -gt "0" ]] ; then
                echo "${RSYNC_ERR}"
                printf "${bired}Initial rsync process failed: ${RSYNC_ERR} \nExiting script...${color_off}\n"
                exit 1
            fi
            # make separate subdirectories for R1, R2, and R3, with further subdirectories for the different components
            R1=("${outputdir}/${packagename}_R1")
            audR1="${R1}/${packagename}_R1__Audio"
            derR1="${R1}/${packagename}_R1__Derivatives"
            dpxR1="${R1}/${packagename}_R1__DPX"
            R2=("${outputdir}/${packagename}_R2")
            audR2="${R2}/${packagename}_R2__Audio"
            derR2="${R2}/${packagename}_R2__Derivatives"
            dpxR2="${R2}/${packagename}_R2__DPX"
            R3=("${outputdir}/${packagename}_R3")
            audR3="${R3}/${packagename}_R3__Audio"
            derR3="${R3}/${packagename}_R3__Derivatives"
            dpxR3="${R3}/${packagename}_R3__DPX"
            mkdir -p "${R1}" "${audR1}" "${derR1}" "${dpxR1}" "${R2}" "${audR2}" "${derR2}" "${dpxR2}" "${R3}" "${audR3}" "${derR3}" "${dpxR3}"

            # find and move audio, derivatives, and DPX files for each reel in turn. Finds files based on filenaming + extension; assumes each file will have reel # in filename + lowercase extension.
            if [[ -d "${audR1}" ]] ; then
                find "${outputdir}" -name "*R1*.wav" -exec mv -vi {} "${audR1}" \;
            else
                printf "%sMissing ${audR1}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${derR1}" ]] ; then
                find "${outputdir}" -name "*R1*.mov" -exec mv -vi {} "${derR1}" \;
            else
                printf "%sMissing ${derR1}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${dpxR1}" ]] ; then
                find "${outputdir}" -name "*R1*.dpx" -exec mv -vi {} "${dpxR1}" \;
            else
                printf "%sMissing ${dpxR1}%s" "${bired}" "${color_off}"
                exit 1
            fi

            if [[ -d "${audR2}" ]] ; then
                find "${outputdir}" -name "*R2*.wav" -exec mv -vi {} "${audR2}" \;
            else
                printf "%sMissing ${audR2}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${derR2}" ]] ; then
                find "${outputdir}" -name "*R2*.mov" -exec mv -vi {} "${derR2}" \;
            else
                printf "%sMissing ${derR2}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${dpxR2}" ]] ; then
                find "${outputdir}" -name "*R2*.dpx" -exec mv -vi {} "${dpxR2}" \;
            else
                printf "%sMissing ${dpxR2}%s" "${bired}" "${color_off}"
                exit 1
            fi

            if [[ -d "${audR3}" ]] ; then
                find "${outputdir}" -name "*R3*.wav" -exec mv -vi {} "${audR3}" \;
            else
                printf "%sMissing ${audR3}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${derR3}" ]] ; then
                find "${outputdir}" -name "*R3*.mov" -exec mv -vi {} "${derR3}" \;
            else
                printf "%sMissing ${derR3}%s" "${bired}" "${color_off}"
                exit 1
            fi
            if [[ -d "${dpxR3}" ]] ; then
                find "${outputdir}" -name "*R3*.dpx" -exec mv -vi {} "${dpxR3}" \;
            else
                printf "%sMissing ${dpxR3}%s" "${bired}" "${color_off}"
                exit 1
            fi
            # rename files according to NMAAHC filenaming guidelines
            printf "%sRenaming files in %s%s\n" "${biwhite}" "${color_off}" "${outputdir}"
            find "${audR1}" -name "*R1*.wav" -exec mv -vi {} "${audR1}/${dpxid}_R1_AUD.wav" \;
            find "${derR1}" -name "*R1*ProRes*.mov" -exec mv -vi {} "${derR1}/${dpxid}_R1_DER_01.mov" \;
            find "${derR1}" -name "*R1*Uncompressed*.mov" -exec mv -vi {} "${derR1}/${dpxid}_R1_DER_02.mov" \;
            find "${audR2}" -name "*R2*.wav" -exec mv -vi {} "${audR2}/${dpxid}_R2_AUD.wav" \;
            find "${derR2}" -name "*R2*ProRes*.mov" -exec mv -vi {} "${derR2}/${dpxid}_R2_DER_01.mov" \;
            find "${derR2}" -name "*R2*Uncompressed*.mov" -exec mv -vi {} "${derR2}/${dpxid}_R2_DER_02.mov" \;
            find "${audR3}" -name "*R3*.wav" -exec mv -vi {} "${audR3}/${dpxid}_R3_AUD.wav" \;
            find "${derR3}" -name "*R3*ProRes*.mov" -exec mv -vi {} "${derR3}/${dpxid}_R3_DER_01.mov" \;
            find "${derR3}" -name "*R3*Uncompressed*.mov" -exec mv -vi {} "${derR3}/${dpxid}_R3_DER_02.mov" \;
            ;;
            *   )
            printf "%sERROR. Presently, this script can only handle DPX packages of 1 or 2 or 3 reels. Check back later." "${bired}"
            echo
            cowsay "SORRY!"
            ;;
    esac
}

## SCRIPT ACTIONS

# log script beginning
_log -b
restructureDPX "${@}"
# if the operator has asked to remove the source directory, and there were no rsync errors, then rm the source directory
if [[ "${cleanupdecision}" == "Y" ]] && [[ "${RSYNC_ERR}" -eq 0 ]] ; then
    rm -vr "${input}" # -v=verbose, -r=recursive
fi
# log script ending
_log -e
printf "${biwhite}restructureDPX process complete.${color_off}\n"
exit $?
